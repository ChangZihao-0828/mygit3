package org.java.service.impl;import org.java.dao.MatterCheckMapper;import org.java.dao.MatterRejectMapper;import org.java.dao.StockCheckMapper;import org.java.dao.WarehouseCheckMapper;import org.java.entity.MatterCheck;import org.java.entity.MatterReject;import org.java.entity.StockCheck;import org.java.entity.WarehouseCheck;import org.java.service.InventoryService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;/** * @Auther: 昌子豪 * @Date: 2019/8/13 11:14 * @Description: Frighting!!! */@Servicepublic class InventoryServiceImpl implements InventoryService {    @Autowired    private WarehouseCheckMapper warehouseCheckMapper;    @Autowired    private StockCheckMapper stockCheckMapper;    @Autowired    private MatterCheckMapper matterCheckMapper;    @Autowired    private MatterRejectMapper matterRejectMapper;    @Override    public List<WarehouseCheck> findWarehouseCheck(Integer page,Integer rows,String searchWarehouseCheckId) {        int start = (page-1)*rows;        return warehouseCheckMapper.findWarehouseCheck(start,rows,searchWarehouseCheckId);    }    @Override    public Integer findWarehouseCheckCount(String searchWarehouseCheckId) {        return warehouseCheckMapper.findWarehouseCheckCount(searchWarehouseCheckId);    }    @Override    public List<MatterCheck> findMatterCheck(Integer page,Integer rows,String searchMatterCheckId) {        int start = (page-1)*rows;        return matterCheckMapper.findMatterCheck(start,rows,searchMatterCheckId);    }    @Override    public Integer findMatterCheckCount(String searchMatterCheckId) {        return matterCheckMapper.findMatterCheckCount(searchMatterCheckId);    }    @Override    public List<MatterReject> findMatterReject(Integer page, Integer rows, String searchMatterRejectId) {        int start = (page-1)*rows;        return matterRejectMapper.findMatterReject(start,rows,searchMatterRejectId);    }    @Override    public Integer findMatterRejectCount(String searchMatterRejectId) {        return matterRejectMapper.findMatterRejectCount(searchMatterRejectId);    }    @Override    public List<StockCheck> findStockCheck(Integer page,Integer rows,String searchSrockCheckId) {        int start = (page-1)*rows;        return stockCheckMapper.findStockCheck(start,rows,searchSrockCheckId);    }    @Override    public Integer findStockCheckCount(String searchSrockCheckId) {        return stockCheckMapper.findStockCheckCount(searchSrockCheckId);    }    @Override    @Transactional    public void delWarehouseCheck(String warehouseCheckId) {        warehouseCheckMapper.deleteByPrimaryKey(warehouseCheckId);    }    @Override    @Transactional    public void delMatterCheck(String matterCheckId) {        matterCheckMapper.deleteByPrimaryKey(matterCheckId);    }    @Override    @Transactional    public void delStockCheck(String stockCheckId) {        stockCheckMapper.deleteByPrimaryKey(stockCheckId);    }    @Override    @Transactional    public void delMatterReject(String matterCheckId) {        matterRejectMapper.deleteByPrimaryKey(matterCheckId);    }    @Override    @Transactional    public void addWarehouseCheck(WarehouseCheck warehouseCheck) {        warehouseCheckMapper.insert(warehouseCheck);    }    @Override    @Transactional    public void addMatterCheck(MatterCheck matterCheck) {        matterCheckMapper.insert(matterCheck);    }    @Override    @Transactional    public void addStockCheck(StockCheck stockCheck) {        stockCheckMapper.insert(stockCheck);    }    @Override    @Transactional    public void addMatterReject(MatterReject matterReject) {        matterRejectMapper.insert(matterReject);    }    @Override    @Transactional    public void updateWarehouseCheck(WarehouseCheck warehouseCheck) {        warehouseCheckMapper.updateByPrimaryKeySelective(warehouseCheck);    }    @Override    @Transactional    public void updateMatterCheck(MatterCheck matterCheck) {        matterCheckMapper.updateByPrimaryKeySelective(matterCheck);    }    @Override    @Transactional    public void updateStockCheck(StockCheck stockCheck) {        stockCheckMapper.updateByPrimaryKeySelective(stockCheck);    }    @Override    @Transactional    public void updateMatterReject(MatterReject matterReject) {        matterRejectMapper.updateByPrimaryKeySelective(matterReject);    }}